#!/usr/bin/env ruby

require 'nokogiri'
require 'open-uri'
require 'yaml'
require 'json'

#puts "https://www.youtube.com/watch?v=#{id}"
#puts "http://img.youtube.com/vi/#{id}/hqdefault.jpg"

settings = YAML.load_file('search-config.yml')

puts "\nSearching for videos between #{settings["min_time"]} and #{settings["max_time"]} about:"
settings["keywords"].each { |keyword| puts "  - #{keyword}"}
puts "\n"

def time_hash time_string
  time = time_string.split(':')
  {
    hours: time[-3].to_i,
    minutes: time[-2].to_i,
    seconds: time[-1].to_i
  }
end

def get_seconds time
  time = time.is_a?(String) ? time_hash(time) : time
  time[:hours] * 60 * 60 + time[:minutes] * 60 + time[:seconds]
end

def parse_views views_string
  views_string.gsub(',','').to_i
end

def get_video_info video, keyword
  {
    id: video.attr('data-context-item-id'),
    title: video.css('.yt-lockup-title a').inner_text,
    duration: time_hash(video.css('.video-time').inner_text),
    views: parse_views(video.css('.yt-lockup-meta-info li:last-child').inner_text),
    keyword: keyword
  }
end

def get_next_page_sp query_page
  last_link = query_page.css('.search-pager a:last-child')
  if last_link.length > 0
    last_link.attr('href').to_s.match(/sp=([^&]*)/)[1]
  else
    nil
  end
end

def search(query, min_time="16:00", max_time="18:00", pages=40, sp='', results=[])
  query_page = Nokogiri::HTML(open("https://www.youtube.com/results?sp=#{sp}&q=#{query}"))

  videos = query_page.css('.yt-lockup-video:not([data-ad-impressions])')
  next_page_sp = get_next_page_sp(query_page)

  min_time = min_time.is_a?(String) ? get_seconds(min_time) : min_time
  max_time = max_time.is_a?(String) ? get_seconds(max_time) : max_time

  videos.each do |video|
    video_info = get_video_info(video, query)
    video_duration = get_seconds(video_info[:duration])

    if min_time <= video_duration && video_duration <= max_time
      results << video_info
    end
  end

  if pages > 1 && !next_page_sp.nil?
    print '.'
    search(query, min_time, max_time, pages - 1, next_page_sp, results)
  else
    results
  end
end


final_result = []

settings["keywords"].each do |keyword|
  print "\nsearching #{keyword}"
  final_result += search(keyword, settings["min_time"], settings["max_time"], 4)
end

sorted_final_result = final_result.sort do |a, b|
  b[:views] <=> a[:views]
end

puts "\n\nSearch complete!\n\n"

File.write('app/scripts/videos.js', 'window.videos = ' + sorted_final_result.uniq.to_json)